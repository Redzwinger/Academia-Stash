// Singly Linked List
#include <iostream>
using namespace std;

int element;

struct node
{
    int data;
    struct node* next;
};

struct node* head = NULL;

void insert_beg()
{
    struct node *n = new node;
    cout<<"Insert data to be inserted :"<<endl;
    cin>>element;
    n->data = element;

    if(head == NULL)
    {
        head = n;
        n->next = NULL;
    }
    else
    {
        n->next = head;
        head = n;
    }


}

void insert_end()
{
    struct node* n = new node;
    cout<<"Input data to be inserted :"<<endl;
    cin>>element;
    n -> data = element;
    if(head == NULL)
    {
        n -> next = NULL;
        head = n;
    }
    else
    {
        struct node *temp;
        temp = head;

        while(temp ->next != NULL)
        {
            temp = temp ->next;
        }
        temp -> next = n;
        n -> next = NULL;
    }
}

void insert_after()
{
    int element, val;
    struct node *n = new node;
    struct node *temp = head;

    if(head == NULL)
    {
        cout<<"This is the head node so no need to insert val"<<endl;
        cout<<"Input data to be inserted :"<<endl;
        n->data = element;
        n->next = NULL;
        head = n;
    }
    else
    {
        cout<<"Input data to be inserted :"<<endl;
        cin>>element;
        cout<<"Input element after which data is inserted :"<<endl;
        cin>>val;
        n->data = element;
        while(temp-> data != val)
        {
            temp = temp-> next;
        }
        n-> next = temp-> next;
        temp-> next = n;
    }
}

void insert_before()
{
    struct node *temp;
    struct node *pretemp;
    struct node *n = new node;
    int val;
    n->data = element;
    temp = head;
    pretemp = head;

    if(head == NULL)
    {
        cout<<"This is the first element there is no need for val."<<endl;
        cout<<"Enter data to be inserted :"<<endl;
        cin>>element;
        head = n;
        n->next = NULL;
    }
    else
    {
        cout<<"Insert the data to be inserted :"<<endl;
        cin>>element;
        cout<<"Enter element after which data is to be inserted :"<<endl;
        cin>>val;

        while(temp->data != val)
        {
            pretemp = temp;
            temp = temp->next;
        }
        n->next = pretemp->next;
        pretemp->next = n;
    }
}

void del_end()
{
    struct node *temp;
    struct node *pretemp;
    temp = head;
    pretemp = head;

    if(head == NULL)
    {
        cout<<"List is empty, Operation cannot be performed."<<endl;
    }
    else if(head->next == NULL)
    {
        head = NULL;
    }
    else
    {
        while(temp->next != NULL)
        {
            pretemp = temp;
            temp = temp->next;
        }
        pretemp->next = NULL;
        delete temp;

    }
}

void del_beg()
{
    struct node *temp;
    struct node *pretemp;
    temp = head;
    pretemp = head;

    if(head == NULL)
    {
        cout<<"List is empty, Operation cannot be performed."<<endl;
    }
    else if(head->next == NULL)
    {
        head = NULL;
    }
    else
    {
        temp = head;
        head = head->next;
        delete temp;
    }
}

//void del_before()
//{
    struct node *temp;
    struct node *pretemp;
    int val;
    temp = head;
    pretemp = head;

    if(head == NULL)
    {
        cout<<"List is empty."<<endl;
    }
    else
    {
        cout<<"Input the element before which data is to be deleted :"<<endl;
        cin>>val;
        while(temp->data != val)
        {
            pretemp = temp;
            temp = temp->next;
        }
        temp->next = pretemp->next;
        delete pretemp;
    }

//}

void del_after()
{
    struct node *temp;
    struct node *pretemp;
    int val;
    temp = head;
    pretemp = head;

    if(head == NULL)
    {
        cout<<"List is empty."<<endl;
    }
    else
    {
        cout<<"Input the element after which data is to be deleted :"<<endl;
        cin>>val;
        while(pretemp->data !=val)
        {
            cout<<"inside";
            pretemp = temp;
            temp = temp->next;
        }
        pretemp->next = temp->next;
        delete temp;
    }
}

void display_list()
{
    struct node *temp;
    temp = head;

    if(head == NULL)
    {
        cout<<"The list is empty."<<endl;
    }
    else
    {
        while(temp != NULL)
        {
            cout<<temp->data<<"  ";
            temp = temp->next;
        }
        cout<<"    "<<endl;
    }
}


int main()
{
    int choice;
    while(choice != 7)
    {
        cout<<"Operations :"<<endl;
    cout<<"1. Insert at end"<<endl;
    cout<<"2. Insert at beginning"<<endl;
    cout<<"3. Insert before chosen element"<<endl;
    cout<<"4. Insert after chosen element"<<endl;
    cout<<"5. Delete at beginning"<<endl;
    cout<<"6. Delete before chosen element"<<endl;
    cout<<"7. Delete after chosen element"<<endl;
    cout<<"8. Delete at end"<<endl;
    cout<<"9. Display"<<endl;
    cout<<"10. Exit"<<endl;
    cout<<"Input chosen operation number :"<<endl;
    cin>>choice;

    if(choice == 1)
    {
        insert_end();
    }
    else if(choice == 2)
    {
        insert_beg();
    }
    else if(choice == 3)
    {
        insert_before();
    }
    else if(choice == 4)
    {
        insert_after();
    }
    else if(choice == 5)
    {
        del_beg();
    }
    else if(choice == 6)
    {
        del_before();
    }
    else if(choice == 7)
    {
        del_after();
    }
    else if(choice == 8)
    {
        del_end();
    }
    else if(choice == 9)
    {
        display_list();
    }
    else if(choice == 10)
    {
        break;
    }
    }
    cout<<"THANK YOU"<<endl;

}


